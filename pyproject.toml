[build-system]
requires = [
    "setuptools>=63",
    "setuptools_scm[toml]>7.0.0",
    "wheel",
]
build-backend = 'setuptools.build_meta'

[options]
packages = { find = { where = "src", exclude = ["tests"] } }
include_package_data = true
package_dir = { "" = "src" }
zip_safe = false

[options.entry_points]
mkdocs.plugins = [
    "frkl-docgen = kiara.doc:FrklDocumentationPlugin"
]

[tool.aliases]
build = "bdist_wheel"
release = "build upload"

[tool.bdist_wheel]
universal = 0

[tool.devpi.upload]
no-vcs = 1
formats = ["sdist", "bdist_wheel"]

[project]
name = "kiara"
description = "Data-centric workflow orchestration."
authors = [
    { name = "Markus Binsteiner", email = "markus@frkl.io" }
]
readme = "README.md"
requires-python = ">=3.8"
keywords = ["kiara"]
license = { text = "MPL-2.0" }
classifiers = [
    "Framework :: Django",
    "Programming Language :: Python :: 3",
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12"
]


dependencies = [
    "anyio>=3.7.0",
    "appdirs>=1.4.4,<2.0.0",
    "bidict>=0.21.0",
    "boltons>=21.0.0",
    "click>=8.1.6",
    "dag-cbor>=0.3.3,<0.4.0",
    "deepdiff>=6.0.0,<7.0.0",
    "distro>=1.6.0",
    "dpath>=2.0.0",
    "docstring_parser>=0.15.0",
    "email-validator>=2.1.0.post1",
    "fasteners>=0.18",
    "filetype>=1.0.0,<2.0.0",
    "httpx>=0.23.0",
    "humanfriendly>=10.0",
    "importlib-metadata>=3.0.0.0,<8.0.0",
    "jinja2>=3.0.1",
    "patool>=1.12",
    "mistune>=3.0.0",
    "mmhash3>=3.0.1",
    "multiformats>=0.3.1,<0.4.0",
    "multiformats-config>=0.3.1,<0.4.0",
    "networkx>=3.0,<4.0",
    "orjson>=3.8.10",
    "pp-ez>=0.2.0",
    "puremagic>=1.15",
    "pydantic>=2.0.0,<3.0.0",
    "pydantic-settings>=2.0.0",
    "pytz>=2022.6",
    "pyzmq>=25.0.0",
    "regex>=2022.4.0",
    "rich>=12.4.0",
    "rich-click>=1.7.0,<1.8.0",
    "ruamel.yaml>=0.18.0,<0.19.0",
    "sortedcontainers>=2.4.0",
    "stevedore>=5.0.0,<6.0.0",
    "structlog>=21.5.0",
    "tzlocal>=2.1,<6.0",
]
dynamic = ["version"]

[project.scripts]
kiara = "kiara.interfaces.cli:cli"

[project.entry-points."kiara.archive_type"]

filesystem_data_archive = "kiara.registries.data.data_store.filesystem_store:FileSystemDataArchive"
filesystem_data_store = "kiara.registries.data.data_store.filesystem_store:FilesystemDataStore"
filesystem_job_archive = "kiara.registries.jobs.job_store.filesystem_store:FileSystemJobArchive"
filesystem_job_store = "kiara.registries.jobs.job_store.filesystem_store:FileSystemJobStore"
filesystem_alias_archive = "kiara.registries.aliases.archives:FileSystemAliasArchive"
filesystem_alias_store = "kiara.registries.aliases.archives:FileSystemAliasStore"
filesystem_destiny_archive = "kiara.registries.destinies.filesystem_store:FileSystemDestinyArchive"
filesystem_destiny_store = "kiara.registries.destinies.filesystem_store:FileSystemDestinyStore"
filesystem_workflow_archive = "kiara.registries.workflows.archives:FileSystemWorkflowArchive"
filesystem_workflow_store = "kiara.registries.workflows.archives:FileSystemWorkflowStore"

[project.entry-points."kiara.cli_subcommands"]

run = "kiara.interfaces.cli.run:run"
info = "kiara.interfaces.cli.info.commands:info"
context = "kiara.interfaces.cli.context.commands:context"
data = "kiara.interfaces.cli.data.commands:data"
module = "kiara.interfaces.cli.module.commands:module"
operation = "kiara.interfaces.cli.operation.commands:operation"
pipeline = "kiara.interfaces.cli.pipeline.commands:pipeline"
data-type = "kiara.interfaces.cli.type.commands:type_group"
workflow = "kiara.interfaces.cli.workflow.commands:workflow"
render = "kiara.interfaces.cli.render.commands:render"

[project.entry-points."kiara.data_types"]

none = "kiara.data_types.included_core_types:NoneType"
any = "kiara.data_types.included_core_types:AnyType"
bytes = "kiara.data_types.included_core_types:BytesType"
string = "kiara.data_types.included_core_types:StringType"
boolean = "kiara.data_types.included_core_types:BooleanType"
dict = "kiara.data_types.included_core_types:DictValueType"
terminal_renderable = "kiara.data_types.included_core_types.internal:TerminalRenderable"
doc = "kiara.data_types.included_core_types.internal:DocumentationModelValueType"
file = "kiara.data_types.included_core_types.filesystem:FileValueType"
file_bundle = "kiara.data_types.included_core_types.filesystem:FileBundleValueType"
internal = "kiara.data_types.included_core_types.internal:InternalType"
internal_model = "kiara.data_types.included_core_types.internal:InternalModelValueType"
python_object = "kiara.data_types.included_core_types.serialization:PythonObjectType"
render_scene = "kiara.data_types.included_core_types.internal.render_value:RenderSceneDataType"
render_value_result = "kiara.data_types.included_core_types.internal.render_value:RenderValueResultDataType"

[project.entry-points."kiara.metadata_models"]

python_class = "kiara.models.values.value_metadata.included_metadata_types:PythonClassMetadata"
file = "kiara.models.values.value_metadata.included_metadata_types:FileMetadata"
file_bundle = "kiara.models.values.value_metadata.included_metadata_types:FileBundleMetadata"

[project.entry-points."kiara.model_classes"]

default = "kiara:find_model_classes"
python_api = "kiara:find_model_classes_api"

[project.entry-points."kiara.modules"]

"pipeline" = "kiara.modules.included_core_modules.pipeline:PipelineModule"
"unpickle.value" = "kiara.modules.included_core_modules.serialization:UnpickleModule"
"load.bytes" = "kiara.modules.included_core_modules.serialization:LoadBytesModule"
"load.string" = "kiara.modules.included_core_modules.serialization:LoadStringModule"
"load.internal_model" = "kiara.modules.included_core_modules.serialization:LoadInternalModel"
"deserialize.from_json" = "kiara.modules.included_core_modules.serialization:DeserializeFromJsonModule"
"value.extract_metadata" = "kiara.modules.included_core_modules.metadata:ExtractMetadataModule"
"pretty_print.value" = "kiara.modules.included_core_modules.pretty_print:ValueTypePrettyPrintModule"
"pretty_print.any.value" = "kiara.modules.included_core_modules.pretty_print:PrettyPrintAnyValueModule"
"import.local.file" = "kiara.modules.included_core_modules.filesystem:ImportLocalFileModule"
"import.local.file_bundle" = "kiara.modules.included_core_modules.filesystem:ImportLocalFileBundleModule"
"deserialize.file" = "kiara.modules.included_core_modules.filesystem:DeserializeFileModule"
"deserialize.file_bundle" = "kiara.modules.included_core_modules.filesystem:DeserializeFileBundleModule"
"file_bundle.pick.file" = "kiara.modules.included_core_modules.filesystem:PickFileFromFileBundleModule"
"file_bundle.pick.sub_folder" = "kiara.modules.included_core_modules.filesystem:PickSubBundle"
"export.file" = "kiara.modules.included_core_modules.filesystem:ExportFileModule"
"render.value" = "kiara.modules.included_core_modules.render_value:ValueTypeRenderModule"

[project.entry-points."kiara.operation_types"]

custom_module = "kiara.operations.included_core_operations:CustomModuleOperationType"
pipeline = "kiara.operations.included_core_operations.pipeline:PipelineOperationType"
deserialize = "kiara.operations.included_core_operations.serialize:DeSerializeOperationType"
extract_metadata = "kiara.operations.included_core_operations.metadata:ExtractMetadataOperationType"
pretty_print = "kiara.operations.included_core_operations.pretty_print:PrettyPrintOperationType"
create_from = "kiara.operations.included_core_operations.create_from:CreateFromOperationType"
import_data = "kiara.operations.included_core_operations.import_data:ImportDataOperationType"
export_as = "kiara.operations.included_core_operations.export_as:ExportAsOperationType"
render_value = "kiara.operations.included_core_operations.render_value:RenderValueOperationType"
#render_data = "kiara.operations.included_core_operations.render_data:RenderDataOperationType"
filter = "kiara.operations.included_core_operations.filter:FilterOperationType"

[project.entry-points."kiara.renderers"]

default = "kiara:find_renderer_classes"

[project.entry-points."mkdocs.plugins"]

"frkl-docgen" = "kiara.doc:FrklDocumentationPlugin"


[project.optional-dependencies]
all_plugins = [
    "kiara_plugin.core_types",
    "kiara_plugin.tabular",
    "kiara_plugin.onboarding",
    "kiara_plugin.network_analysis",
    "kiara_plugin.language_processing",
    "kiara_plugin.html",
    "kiara_plugin.jupyter",
    "kiara_plugin.streamlit",
]

dev_documentation = [
    "icecream>=2.1.0",
    "jupyter",
    "mike>=1.0.1",
    "mkdocs-awesome-pages-plugin>=2.5.0",
    "mkdocs-literate-nav>=0.4.0",
    "mkdocs-macros-plugin>=0.7.0,<1.1.0",
    "mkdocs-material>=8.0.0",
    "mkdocs-section-index>0.3.0",
    "mkdocstrings[python]>=0.18",
    "mkdocs-gen-files>=0.3.1"
]

dev_testing = [
    "coveralls>=3.2.0",
    "flake8>=3.8.4",
    "jsonschema>=4.0.0",
    "mypy>=0.800",
    "pandas-stubs",
    "pytest>=6.2.2",
    "pytest-cov>=2.11.1",
    "pytest-html>=3.1.0",
    "pytest-xdist>=3.2.1",
    "tox>=3.21.2",
    "types-Deprecated",
    "types-PyYAML",
    "types-pkg-resources",
    "types-python-dateutil",
    "types-pytz",
    "types-tzlocal",
    "types-orjson",
    "types-Pygments",
    "types-Markdown",
    "types-humanfriendly",
    "types-setuptools",
    "sqlalchemy-stubs"

]

dev_utils = [
    "kiara_plugin.core_types",
    "kiara_plugin.tabular",
    "kiara_plugin.develop",
    "build",
    "flake8>=3.8.4",
    "ipython",
    "mypy>=0.800",
    "pandas-stubs",
    "pip-licenses>=3.3.0",
    "pre-commit>=2.9.3",
    "pytest>=6.2.2",
    "pytest-xdist>=3.2.1",
    "setup-cfg-fmt>=1.16.0",
    "ruff>=0.0.272",
    "types-Deprecated",
    "types-PyYAML",
    "types-pkg-resources",
    "types-python-dateutil",
    "types-pytz",
    "types-tzlocal",
    "types-orjson",
    "types-Pygments",
    "types-Markdown",
    "types-humanfriendly",
    "types-humanfriendly",
    "types-setuptools",
    "sqlalchemy-stubs",
    "watchgod>=0.6",
    "wheel"
]

doc = [
    "airium>=0.2.5",
    "black>=22.3.0",
    "jupytext>=1.14.0",
    "mkdocstrings>=0.18.0"
]

jupyter = [
    "jupyterlab",
    "pygraphviz",
    "ipydagred3"
]

[project.urls]
homepage = "https://github.com/DHARPA-Project/kiara"
documentation = "https://dharpa.org/kiara.documentation"
repository = "https://github.com/DHARPA-Project/kiara"

[tool.black]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | external
)/
'''

[tool.setuptools_scm]
write_to = "src/kiara/version.txt"

[tool.pytest.ini_options]
pythonpath = [
    "src"
]
addopts = "--verbose"
norecursedirs = [
    "dist",
    "build",
    ".tox"
]
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["kiara"]
omit = [
    "src/kiara/doc/*"
]
relative_files = true

[tool.coverage.paths]
source = [
    "src/",
    "*/site-packages/"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if typing.TYPE_CHECKING:",
    "if kiara is None:"
]

[tool.ruff]
line-length = 88

src = ["src", "tests"]

select = [
    "D",
    "E",
    "F",
    "RUF",
    "I001",
    "YTT",
    "S",
    "C4",
    "T10",
    "ISC",
    "ICN",
    "T20",
    "Q",
    "TID",
    "PD",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "PIE",
]
#select = ["E", "F", "RUF100", "W", "I001"]
ignore = ["E501", "S101", "SIM118", "SIM108", "PLR2004", "PLR0913", "S110", "PIE810", "PLR0911", "PLR0915", "PLR0912", "D", "D401", "PLW0603", "PLR5501", "PLW2901"]

fix = true
fixable = ["E", "F", "RUF100", "I001", "Q", "D"]


#fixable = ["E", "F", "RUF100", "I001"]
# Enable Pyflakes `E` and `F` codes by default.

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "examples/"
]
per-file-ignores = { }

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["kiara", "kiara_plugin"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.pyright]
include = ["src"]
exclude = ["**/__pycache__"]
ignore = []

reportMissingImports = true
reportMissingTypeStubs = false

executionEnvironments = [
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
mypy_path = "src"
namespace_packages = false
plugins = [
    "pydantic.mypy"
]


# mypy per-module options:
[[tool.mypy.overrides]]
module = [
    "airium.*",
    "alembic.*",
    "appdirs",
    "asciinet.*",
    "black",
    "boltons.*",
    "click",
    "deepdiff",
    "devtools",
    "distro",
    "dpath.*",
    "docstring_parser.*",
    "fastapi.*",
    "fasteners.*",
    "filetype",
    "httpx.*",
    "humanfriendly",
    "hypercorn.*",
    "ipydagred3",
    "jinja2",
    "kiara_modules.*",
    "kiara_streamlit.*",
    "kiara.doc.mkdocstrings.handler.*",
    "icecream.*",
    "IPython.*",
    "importlib_metadata.*",
    "importlib_resources.*",
    "jupytext",
    "mmh3",
    "pickle5",
    "pp",
    "mkdocstrings.*",
    "mkdocs.*",
    "mkdocs_gen_files.*",
    "mistune",
    "networkx",
    "orjson.*",
    "patoolib.*",
    "pyarrow.*",
    "pygraphviz",
    "regex.*",
    "structlog",
    "rich_click.*",
    "ruamel.*",
    "sortedcontainers",
    "stevedore",
    "streamlit.*",
    "textual.*",
    "uvloop",
    "uvicorn"
]
ignore_missing_imports = true
