[metadata]
name = kiara
description = A workflow management and execution engine for the DHARPA project.
long_description = file: README.md
long_description_content_type = text/markdown
url = https://github.com/DHARPA-Project/kiara
author = Markus Binsteiner
author_email = markus.binsteiner@uni.lu
license = MPL-2.0
license_file = LICENSE
platforms = any
classifiers =
    Development Status :: 3 - Alpha
    License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3 :: Only
    Programming Language :: Python :: 3.6
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3.9

[options]
packages = find_namespace:
install_requires =
    anyio>=3.0.0,<4.0.0
    appdirs>=1.4.4,<2.0.0
    bidict>=0.21.0
    deepdiff>=5.2.0,<6.0.0
    dpath>=2.0.0
    filetype>=1.0.0,<2.0.0
    networkx>=2.5,<3.0
    pp-ez>=0.2.0
    py-multibase>=1.0.0,<2.0.0
    py-multihash>=2.0.0,<3.0.0
    pyarrow>=4.0.0,<5.0.0
    pydantic[email]>=1.7.0,<2.0.0
    python-dateutil>=2.8.0
    python-slugify>=5.0.0
    pyyaml>=5.4.0,<6.0.0
    pyzmq>=22.0.0,<23.0.0
    rich>=9.0.0,<11.0.0
    ruamel.yaml>=0.17.0,<0.18.0
    stevedore>=3.3.0,<4.0.0
    toolz>=0.11.0
    tzlocal>=2.1,<3.0
    typing_extensions>=3.0.0.0;python_version<'3.8'
python_requires = >=3.6
include_package_data = True
package_dir =
    =src
setup_requires =
    setuptools_scm
    setuptools_scm_git_archive
zip_safe = False

[options.entry_points]
console_scripts =
    kiara = kiara.interfaces.cli:cli
kiara.modules =
    pipeline = kiara.pipeline.module:PipelineModule
    metadata.python_class = kiara.modules.metadata:ExtractPythonClass
    metadata.value_hash = kiara.modules.metadata:CalculateValueHashModule
kiara.operation_types =
    extract_metadata = kiara.data.operations.extract_metadata:ExtractMetadataOperationType
    pretty_print = kiara.data.operations.pretty_print:PrettyPrintOperationType
    save_value = kiara.data.operations.save_value:SaveOperationType
    calculate_hash = kiara.data.operations.calculate_hash:CalculateHashOperationType
    convert = kiara.data.operations.type_convert:TypeConversionOperationType
    serialize = kiara.data.operations.serialize:SerializeOperationType
    deserialize = kiara.data.operations.serialize:DeserializeOperationType
kiara.value_types =
    load_config = kiara.data.types.core:ValueLoadConfig
mkdocs.plugins =
    frkl-docgen = kiara.doc:FrklDocumentationPlugin

[options.extras_require]
cli =
    asyncclick>=7.0.0,<8.0.0
    click>=7.0.0,<8.0.0
dev_documentation =
    mknotebooks>=0.7.0
    mkdocs-gen-files>=0.3.1;python_version>='3.7'
dev_modules =
    jupyter
    jupyterlab
    pandas
    pyarrow
dev_testing =
    flake8>=3.8.4
    mypy>=0.800
    pytest>=6.2.2
    pytest-cov>=2.11.1
    tox>=3.21.2
    types-PyYAML
    types-pkg_resources
    types-python-dateutil
    types-python-slugify
    types-tzlocal
dev_utils =
    black
    cruft>=2.6.0
    flake8>=3.8.4
    ipython
    pip-licenses>=3.3.0
    pre-commit>=2.9.3
    setup-cfg-fmt>=1.16.0
    watchgod>=0.6
    wheel
jupyter =
    ipython>=7.0.0,<8.0.0
modules_core =
    kiara_modules.core[all]
modules_language_processing =
    kiara_modules.language_processing[all]
modules_network_analysis =
    kiara_modules.network_analysis[all]
rendering =
    jinja2>=3.0.1
    jupytext>=1.11.0
rest_api =
    fastapi>=0.66
    uvicorn>=0.14.0

[options.packages.find]
where = src
exclude =
    tests

[aliases]
build = bdist_wheel
release = build upload

[bdist_wheel]
universal = 1

[devpi:upload]
no-vcs = 1
formats = sdist, bdist_wheel

[tool:pytest]
addopts =
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests

[tox:tox]
envlist = py36, py37, py38, flake8

[testenv]
setenv =
    PYTHONPATH = {toxinidir}
deps =
    -e{toxinidir}[dev_testing,all]
install_command = pip install {opts} {packages}
commands =
    pip install -U pip
    py.test --basetemp={envtmpdir}

[testenv:flake8]
basepython = python
deps =
    -e{toxinidir}[dev_testing,all]
    flake8
install_command = pip install {opts} {packages}
commands = flake8 src

[coverage:run]
branch = True
source = kiara

[coverage:paths]
source =
    src/
    */site-packages/

[coverage:report]
exclude_lines =
    pragma: no cover
   
    def __repr__
    if self\.debug
   
    raise AssertionError
    raise NotImplementedError
   
    if 0:
    if __name__ == .__main__.:

[flake8]
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py
    .git
    __pycache__
ignore = F405, W503, E501
max-line-length = 88

[isort]
profile = black
indent = '    '
skip = .tox,.venv,build,dist
known_standard_library = setuptools,pkg_resources
known_test = pytest
known_first_party = kiara
sections = FUTURE,STDLIB,COMPAT,TEST,THIRDPARTY,FIRSTPARTY,LOCALFOLDER
default_section = THIRDPARTY
multi_line_output = 3
include_trailing_comma = True
force_grid_wrap = 0
combine_as_imports = True
line_length = 88

[mypy]
mypy_path =
    src/
namespace_packages = false
plugins = pydantic.mypy

[mypy-appdirs]
ignore_missing_imports = true

[mypy-asciinet.*]
ignore_missing_imports = true

[mypy-asyncclick]
ignore_missing_imports = true

[mypy-deepdiff]
ignore_missing_imports = true

[mypy-devtools]
ignore_missing_imports = true

[mypy-dpath.*]
ignore_missing_imports = true

[mypy-fastapi]
ignore_missing_imports = true

[mypy-filetype]
ignore_missing_imports = true

[mypy-kiara_modules.*]
ignore_missing_imports = true

[mypy-IPython.*]
ignore_missing_imports = true

[mypy-jupytext]
ignore_missing_imports = true

[mypy-pp]
ignore_missing_imports = true

[mypy-mkdocstrings.*]
ignore_missing_imports = true

[mypy-mkdocs.*]
ignore_missing_imports = true

[mypy-networkx]
ignore_missing_imports = true

[mypy-pyarrow.*]
ignore_missing_imports = true

[mypy-pygraphviz]
ignore_missing_imports = true

[mypy-ruamel.*]
ignore_missing_imports = true

[mypy-stevedore]
ignore_missing_imports = true

[mypy-uvloop]
ignore_missing_imports = true

[mypy-uvicorn]
ignore_missing_imports = true
