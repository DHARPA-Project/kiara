[options]
packages = find_namespace:
include_package_data = True
package_dir =
    =src
zip_safe = False

[options.entry_points]
console_scripts =
    kiara = kiara.interfaces.cli:cli
kiara.archive_type =
    filesystem_data_archive = kiara.registries.data.data_store.filesystem_store:FileSystemDataArchive
    filesystem_data_store = kiara.registries.data.data_store.filesystem_store:FilesystemDataStore
    filesystem_job_archive = kiara.registries.jobs.job_store.filesystem_store:FileSystemJobArchive
    filesystem_job_store = kiara.registries.jobs.job_store.filesystem_store:FileSystemJobStore
    filesystem_alias_archive = kiara.registries.aliases.archives:FileSystemAliasArchive
    filesystem_alias_store = kiara.registries.aliases.archives:FileSystemAliasStore
    filesystem_destiny_archive = kiara.registries.destinies.filesystem_store:FileSystemDestinyArchive
    filesystem_destiny_store = kiara.registries.destinies.filesystem_store:FileSystemDestinyStore
    filesystem_workflow_archive = kiara.registries.workflows.archives:FileSystemWorkflowArchive
    filesystem_workflow_store = kiara.registries.workflows.archives:FileSystemWorkflowStore
kiara.cli_subcommands =
    run = kiara.interfaces.cli.run:run
    config = kiara.interfaces.cli.config.commands:config
    context = kiara.interfaces.cli.context.commands:context
    data = kiara.interfaces.cli.data.commands:data
    module = kiara.interfaces.cli.module.commands:module
    operation = kiara.interfaces.cli.operation.commands:operation
    pipeline = kiara.interfaces.cli.pipeline.commands:pipeline
    data-type = kiara.interfaces.cli.type.commands:type_group
    workflow = kiara.interfaces.cli.workflow.commands:workflow
    render = kiara.interfaces.cli.render.commands:render
kiara.data_types =
    none = kiara.data_types.included_core_types:NoneType
    any = kiara.data_types.included_core_types:AnyType
    bytes = kiara.data_types.included_core_types:BytesType
    string = kiara.data_types.included_core_types:StringType
    boolean = kiara.data_types.included_core_types:BooleanType
    dict = kiara.data_types.included_core_types:DictValueType
    terminal_renderable = kiara.data_types.included_core_types.internal:TerminalRenderable
    doc = kiara.data_types.included_core_types.internal:DocumentationModelValueType
    file = kiara.data_types.included_core_types.filesystem:FileValueType
    file_bundle = kiara.data_types.included_core_types.filesystem:FileBundleValueType
    internal = kiara.data_types.included_core_types.internal:InternalType
    internal_model = kiara.data_types.included_core_types.internal:InternalModelValueType
    python_object = kiara.data_types.included_core_types.serialization:PythonObjectType
    render_scene = kiara.data_types.included_core_types.internal.render_value:RenderSceneDataType
    render_value_result = kiara.data_types.included_core_types.internal.render_value:RenderValueResultDataType
kiara.metadata_models =
    python_class = kiara.models.values.value_metadata.included_metadata_types:PythonClassMetadata
    file = kiara.models.values.value_metadata.included_metadata_types:FileMetadata
    file_bundle = kiara.models.values.value_metadata.included_metadata_types:FileBundleMetadata
kiara.model_classes =
    default = kiara:find_model_classes
    python_api = kiara:find_model_classes_api
kiara.modules =
    pipeline = kiara.modules.included_core_modules.pipeline:PipelineModule
    unpickle.value = kiara.modules.included_core_modules.serialization:UnpickleModule
    load.bytes = kiara.modules.included_core_modules.serialization:LoadBytesModule
    load.string = kiara.modules.included_core_modules.serialization:LoadStringModule
    load.internal_model = kiara.modules.included_core_modules.serialization:LoadInternalModel
    deserialize.from_json = kiara.modules.included_core_modules.serialization:DeserializeFromJsonModule
    value.extract_metadata = kiara.modules.included_core_modules.metadata:ExtractMetadataModule
    pretty_print.value = kiara.modules.included_core_modules.pretty_print:ValueTypePrettyPrintModule
    pretty_print.any.value = kiara.modules.included_core_modules.pretty_print:PrettyPrintAnyValueModule
    import.local.file = kiara.modules.included_core_modules.filesystem:ImportLocalFileModule
    import.local.file_bundle = kiara.modules.included_core_modules.filesystem:ImportLocalFileBundleModule
    deserialize.file = kiara.modules.included_core_modules.filesystem:DeserializeFileModule
    deserialize.file_bundle = kiara.modules.included_core_modules.filesystem:DeserializeFileBundleModule
    file_bundle.pick.file = kiara.modules.included_core_modules.filesystem:PickFileFromFileBundleModule
    file_bundle.pick.sub_folder = kiara.modules.included_core_modules.filesystem:PickSubBundle
    export.file = kiara.modules.included_core_modules.filesystem:ExportFileModule
    render.value = kiara.modules.included_core_modules.render_value:ValueTypeRenderModule
kiara.operation_types =
    custom_module = kiara.operations.included_core_operations:CustomModuleOperationType
    pipeline = kiara.operations.included_core_operations.pipeline:PipelineOperationType
    deserialize = kiara.operations.included_core_operations.serialize:DeSerializeOperationType
    extract_metadata = kiara.operations.included_core_operations.metadata:ExtractMetadataOperationType
    pretty_print = kiara.operations.included_core_operations.pretty_print:PrettyPrintOperationType
    create_from = kiara.operations.included_core_operations.create_from:CreateFromOperationType
    export_as = kiara.operations.included_core_operations.export_as:ExportAsOperationType
    render_value = kiara.operations.included_core_operations.render_value:RenderValueOperationType
    filter = kiara.operations.included_core_operations.filter:FilterOperationType
mkdocs.plugins =
    frkl-docgen = kiara.doc:FrklDocumentationPlugin

[options.packages.find]
where = src
exclude =
    tests

[aliases]
build = bdist_wheel
release = build upload

[bdist_wheel]
universal = 1

[devpi:upload]
no-vcs = 1
formats = sdist, bdist_wheel

[tool:pytest]
addopts =
    --verbose
norecursedirs =
    dist
    build
    .tox
testpaths = tests

[testenv]
setenv =
    PYTHONPATH = {toxinidir}
deps =
    -e{toxinidir}[dev_testing,all]
install_command = pip install {opts} {packages}
commands =
    pip install -U pip
    py.test --basetemp={envtmpdir}

[coverage:run]
branch = True
source = kiara
omit =
    src/kiara/doc/*

[coverage:paths]
source =
    src/
    */site-packages/
relative_files = true

[coverage:report]
exclude_lines =
    pragma: no cover
   
    def __repr__
    if self\.debug
   
    raise AssertionError
    raise NotImplementedError
   
    if 0:
    if __name__ == .__main__.:
    if typing.TYPE_CHECKING:
    if kiara is None:

[mypy]
mypy_path =
    src/
namespace_packages = false
plugins =
    pydantic.mypy

[mypy-airium.*]
ignore_missing_imports = true

[mypy-alembic.*]
ignore_missing_imports = true

[mypy-appdirs]
ignore_missing_imports = true

[mypy-asciinet.*]
ignore_missing_imports = true

[mypy-black]
ignore_missing_imports = true

[mypy-boltons.*]
ignore_missing_imports = true

[mypy-click]
ignore_missing_imports = true

[mypy-deepdiff]
ignore_missing_imports = true

[mypy-devtools]
ignore_missing_imports = true

[mypy-distro]
ignore_missing_imports = true

[mypy-dpath.*]
ignore_missing_imports = true

[mypy-fastapi.*]
ignore_missing_imports = true

[mypy-filetype]
ignore_missing_imports = true

[mypy-httpx.*]
ignore_missing_imports = true

[mypy-humanfriendly]
ignore_missing_imports = true

[mypy-hypercorn.*]
ignore_missing_imports = true

[mypy-ipydagred3]
ignore_missing_imports = true

[mypy-jinja2]
ignore_missing_imports = true

[mypy-kiara_modules.*]
ignore_missing_imports = true

[mypy-kiara_streamlit.*]
ignore_missing_imports = true

[mypy-kiara.doc.mkdocstrings.handler.*]
ignore_missing_imports = true

[mypy-IPython.*]
ignore_missing_imports = true

[mypy-importlib_metadata.*]
ignore_missing_imports = true

[mypy-importlib_resources.*]
ignore_missing_imports = true

[mypy-jupytext]
ignore_missing_imports = true

[mypy-mmh3]
ignore_missing_imports = true

[mypy-pickle5]
ignore_missing_imports = true

[mypy-pp]
ignore_missing_imports = true

[mypy-mkdocstrings.*]
ignore_missing_imports = true

[mypy-mkdocs.*]
ignore_missing_imports = true

[mypy-mkdocs_gen_files.*]
ignore_missing_imports = true

[mypy-mistune]
ignore_missing_imports = true

[mypy-networkx]
ignore_missing_imports = true

[mypy-orjson.*]
ignore_missing_imports = true

[mypy-pyarrow.*]
ignore_missing_imports = true

[mypy-pygraphviz]
ignore_missing_imports = true

[mypy-regex.*]
ignore_missing_imports = true

[mypy-structlog]
ignore_missing_imports = true

[mypy-rich_click.*]
ignore_missing_imports = true

[mypy-ruamel.*]
ignore_missing_imports = true

[mypy-sortedcontainers]
ignore_missing_imports = true

[mypy-stevedore]
ignore_missing_imports = true

[mypy-streamlit.*]
ignore_missing_imports = true

[mypy-textual.*]
ignore_missing_imports = true

[mypy-uvloop]
ignore_missing_imports = true

[mypy-uvicorn]
ignore_missing_imports = true
